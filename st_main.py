import streamlit as st

import health_sys as hs

hs.view_console = False  # Не выводить графику в консоль
main_user = hs.User()
main_user.health = hs.Health(main_user)

gender_index = 0  # women
if main_user.gender == "women":
    gender_index = 0
else:
    gender_index = 1

if "user" not in st.session_state:
    st.session_state.user = main_user
    st.session_state.disabled = False

st.title("Калькулятор здоровья")
with st.sidebar:
    page = st.radio("Подсистема организма", ("Легкие", "Сердце", "Жировой запас", "Описание методики"))

hs.view_console = False


def set_gender():
    """Фиксация индекса пола """
    global gender_index
    if gender == 'women':
        gender_index = 0
    else:
        gender_index = 1
    st.session_state.user.gender = gender


def show(subs):
    """Показываем графику в браузере"""
    st.session_state.user.health.add_subsystem(subs)
    values = [int(syb.h_level * 100) for syb in st.session_state.user.health.subsystems.values()]
    keys = [syb.name for syb in st.session_state.user.health.subsystems.values()]
    plt = st.session_state.user.health.create_diagram(keys, values)
    st.write(f'Диаграмма функции желательности')
    st.pyplot(plt.gcf())
    plt.close()
    st.write(f'Калибровочная диаграмма')
    plt2 = subs.calibrate(subs.data, subs.current_value, subs.h_level * 100)
    st.pyplot(plt2.gcf())


if page == "Жировой запас":
    st.header("""Индекс массы тела (ИМТ)""")
    on = st.toggle("## Описание процедуры снятия показателей")
    if on:
        st.markdown(
            " Для расчёта индекса массы тела нужно ввести Ваш рост в сантиметрах и массу тела в килограммах в "
            "соответствующие поля. ")

    st.markdown("### Для расчета индекса массы тела введите свой:")
    weight = st.number_input(' вес в килограммах', value=90, placeholder="Вес в кг")
    height = st.number_input(' рост в сантиметрах', value=170, placeholder="Рост в см")

    if st.button('Рассчитать функцию желательности '):
        imt = hs.IMT()  # Создаем объект Subsys,
        imt.health = st.session_state.user.health  # добавляем в него общий по сессии объект Health
        imt.load('imt.json')  # ctrl-q for a quick-doc of the function under the cursor.
        imt.calc(weight=weight, height=height)
        show(imt)
        st.markdown("#### Методика расчёта результатов")
        st.markdown(
            " Индекс массы тела рассчитывается по формуле Кетле как отношение массы тела в килограммах к квадрату"
            " роста в метрах: ИМТ= масса тела/ (рост*рост), затем соотносится с нормой для введённого веса. ")
        st.markdown("#### Рекомендации ")
        st.markdown(
            " При отклонении ИМТ от нормы рекомендуем Вам обратиться к специалисту и скорректировать диету, "
            "физические нагрузки и другие факторы, влияющие на массу тела. ")
        st.markdown(
            " Тест не равноценен медицинскому исследованию. Точно интерпретировать результаты пробы может специалист. ")
        # st.write(f'Функция желательности {imt.name} = {h_level}%, \t   {imt.name} = {value}')


elif page == "Сердце":
    st.header("""Сердце:""")
    on = st.toggle("## Описание процедуры снятия показателей")
    if on:
        st.markdown(
            "1. Убедитесь, что в течение 20 минут до измерения пульса Вы не занимались физической активностью и "
            "находились в состоянии покоя.")
        st.markdown(
            "2. Положите кончики указательного, среднего и безымянного пальцев на внутреннюю сторону запястья со "
            "стороны большого пальца изнутри от кости. Осторожно надавите, нащупайте пульс.")
        st.markdown("3. Измеряйте пульс в течение 60 секунд.")

    st.markdown("### Для расчета индекса пульса измерьте свой пульс в покое (ударов в минуту):")
    input_value = st.number_input(' введите свой пульс в поле', value=74,
                                  placeholder="Пульс а покое")
    gender = st.selectbox(' введите свой пол', ('women', 'man'), index=gender_index)
    set_gender()
    if st.button('Рассчитать функцию желательности'):
        heart = hs.Heart()
        heart.health = st.session_state.user.health
        heart.load('heart.json')
        heart.calc(input_value)
        show(heart)
        st.markdown("#### Желательность результатов ")
        st.markdown(
            " По данным Американской Кардиологической Ассоциации, нормальное значение частоты сердечных сокращений "
            "(ЧСС) в состоянии покоя находится в диапазоне 60-100 ударов в минуту для людей старше 15 лет. ")
        st.markdown(
            " Для спортсменов и людей, принимающих бета - адреноблокаторы характерен более низкий показатель ЧСС. ")
        st.markdown("#### Рекомендации")
        st.markdown(" При неудовлетворительном результате рекомендуем Вам срочно обратиться к специалисту. ")
        st.markdown(
            " Тест не равноценен медицинскому исследованию. Точно интерпретировать результаты пробы может специалист. ")


elif page == "Легкие":
    st.header("""Легкие:""")
    on = st.toggle("## Описание процедуры снятия показателей")
    if on:
        st.markdown(" Если Вы страдаете патологиями сердечно-сосудистой системы, откажитесь от проведения этой пробы! ")
        st.markdown("#### Описание процедуры снятия показателей ")
        st.markdown(" 1. Подготовьте секундомер. ")
        st.markdown(" 2. Отдохните в течение пяти минут в положении сидя. ")
        st.markdown(" 3. Выполните полный вдох, затем выдох. ")
        st.markdown(" 4. После снова глубокий вдох и задержите дыхание насколько можете. ")
        st.markdown(""" 5. Зафиксируйте время задержки и выдоха (от окончания вдоха до окончания выдоха).""")

    st.markdown("### Для расчета индекса легких измерьте задержку дыхания в секундах:")
    input_value = st.number_input(' введите задержку дыхания в секундах в поле', value=55,
                                  placeholder="Задержка дыхания в секундах")
    gender = st.selectbox(' введите свой пол', ('women', 'man'), index=gender_index)
    set_gender()
    if st.button('Рассчитать функцию желательности'):
        resp = hs.Resp()
        resp.health = st.session_state.user.health
        resp.load('resp.json')
        resp.calc(input_value)
        show(resp)
        st.markdown("####  Желательность результатов ")
        st.markdown("Оценка проводится по таблице Хоружева А.Г., 1993г. ")
        st.markdown(
            "Для мужчин удовлетворительное время задержки составляет от 35 до 49, хороший результат — от 50 до 57,"
            " отличный — 58 и более. ")
        st.markdown(
            "Для женщин удовлетворительно время задержки от 21 до 31 секунды, хорошо — от 32 до 37, "
            "отлично — 38 и более. ")
        st.markdown("#### Рекомендации")
        st.markdown("При результате меньше удовлетворительного рекомендуем Вам срочно обратиться к специалисту.")
        st.markdown(
            "Тест не равноценен медицинскому исследованию. Точно интерпретировать результаты пробы может специалист.")

if page == "Описание методики":
    st.header("""Описание методики""")
    # pdf_viewer("Калькулятор_здоровья_.pdf")

    st.markdown("__Попов М. А., Лопато А. П., Атаман А., Тулбаев Б. Р.__")
    st.markdown("### МОДУЛЬНАЯ ПЛАТФОРМА «КАЛЬКУЛЯТОР ЗДОРОВЬЯ»  ")
    st.markdown("(Научный руководитель - к. х. н. Фатькин А. Ю.) ")
    st.markdown("1 Институт медицинского образования Национального "
                "Медицинского Исследовательского Центра им. В. А. Алмазова, Санкт-Петербург, Российская Федерация ")
    st.markdown("#### Введение.")
    st.markdown(
        " 	На сегодняшний день мониторинг здоровья является одним из основных приоритетов Единой государственной "
        "информационной системы в здравоохранении (ЕГИСЗ). Для подобного мониторинга здоровья необходима модульная"
        "платформа, способная оценить резервы различных подсистем организма. ")
    st.markdown("#### Цель исследования. ")
    st.markdown(
        "	Целью исследования является разработка модульной платформы «Калькулятор"
        " здоровья» для оценки резервов подсистем организма по простым тестам, которые пользователь может пройти "
        "самостоятельно в домашних условиях. Такая платформа создается из набора модулей, написанных на Python, "
        "и может легко расширяться путем добавления новых модулей оценки здоровья. ")
    st.markdown("### Материалы и методы. ")
    st.markdown(
        "	В настоящее время платформа состоит из трех модулей, оценивающих состояние "
        "  сердечно-сосудистой и дыхательной систем и индекс массы тела (ИМТ). В каждом из модулей, написанных "
        "на языке Python, используются данные о функциональных способностях организма, которые пользователь "
        "вводит самостоятельно: возраст, пол, масса тела, рост, время задержки дыхания на вдохе, пульс в покое."
        " В основе расчетов лежат апробированные методики оценки систем организма: для дыхательной системы была "
        "использована проба Штанге, для оценки ИМТ – формула Кетле. Все полученные в тестах результаты переводятся"
        "из натуральных значений в безразмерную шкалу желательности Харрингтона нормированную от 0 до 100%. Общее "
        "состояние организма рассчитывается как среднее геометрическое из частных критериев желательности."
        " Средняя геометрическая оценка позволяет выявить влияние самого неудовлетворительного параметра здоровья."
        "На основе шкалы Харрингтона нами была разработана методика перевода разноразмерных количественных "
        "характеристик (ЧСС, ИМТ, время задержки дыхания) в количественные показатели здоровья в процентах."
        " Например: ИМТ 53%, сердце 81%, легкие 95%, всего здоровье 67% (среднее геометрическое).  "
        "При создании программных модулей был использован метод объектно-ориентированного программирования (ООП), "
        "что позволяет легко дополнять платформу новыми модулями. Приложение написано на Python 3.8+ с "
        "подключением библиотек NumPy, Matplotlib, Pandas.")
    st.markdown("### Результаты. ")
    st.markdown(
        "	В ходе исследования была создана модульная платформа, "
        "объединяющая специфические модули для оценки резервов различных систем органов пользователя. "
        "Каждый модуль содержит специализированные программные классы, позволяющие калибровать функцию"
        " желательности Харрингтона по двум показателям здоровья с оценкой “хорошо” и плохо"
        "В тестах используются простые методики, не требующие специализированных медицинских приборов для"
        " оценки состояния здоровья. Создан понятный пользователю интерфейс ввода и вывода данных. "
        "Пользователь вводит свои показатели своих тестов, которые обрабатываются модулями платформы; "
        "и приложение выводит на экран общую количественную оценку состояния организма и результаты каждого "
        "оцениваемого параметра здоровья в процентах. Получив результат оценки здоровья, пользователь в случае"
        " необходимости сможет своевременно обратиться к врачу для углубленного обследования. Код платформы "
        "выложен на GitHub [AlexFatkin/HealthCalculator5)](https://github.com/AlexFatkin/HealthCalculator5) "
        "в свободное пользование и доступен "
        "для дальнейшего расширения и модернизации.")

    st.markdown("### Выводы. ")
    st.markdown(
        "На основе апробированных функциональных тестов созданы модули, рассчитывающие показатели "
        "здоровья пользователя посредством функции желательности Харрингтона. В результате работы создана "
        "модульная платформа, способная оценивать резервы здоровья организма. Основные преимущества данной "
        "платформы - простота и удобство, позволяющие быстро и достоверно оценить состояние здоровья."
        " Разработанная модульная платформа «Калькулятор здоровья» выполняет одну из основных задач ЕГИСЗ –"
        " мониторинг здоровья населения. Существующие модули платформы создали студенты первого курса ИМО ФГБУ "
        "НМИЦ им. В. А. Алмазова"
        "Опыт написания модулей дал студентам практический навык создания медицинского программного "
        "обеспечения на языке программирования Python. 	В дальнейшем команда проекта планирует улучшать"
        " существующую платформу, добавляя дополнительные модули для оценки других показателей здоровья."
    )
    # st.latex(r'''
    #                     X_i=\dfrac{1}{\gamma}\left(-lnU_i)^{-\gamma}\right)
    #                 ''')
    # st.latex(r'''
    #             F(x) = exp(-(\gamma x)^{-1/\gamma}1\{x>0\})
    #             ''')
    # st.text("Для получения результата:")
    # st.markdown(
    #     "* Сгенерируем N нормально распределенных случайных величин $U_i$ [0,1] (среднее и единичная дисперсия).")
    # st.markdown("* Вычислим N  величин с распределением по формуле:")
    # st.latex(r'''
    #                     X_i=\dfrac{1}{\gamma}\left(-lnU_i)^{-\gamma}\right)
    #                 ''')
    # mu, sigma = 0, 1  # mean and standard deviation
    # gamma = st.slider('Желаемая гамма', 0.25, 2.25, 0.5, 0.25)
    # N = st.number_input("Желаемое N", 100, 10000, 10000)
    # U = np.abs(np.random.normal(mu, sigma, N))
    # X = 1 / gamma * (-np.log(U)) ** (-gamma)
    # X2 = X[X < 20]
    # fig, ax = plt.subplots()
    # count, bins, ignored = plt.hist(X2, 100, density=True)
    # plt.plot(bins,
    #          np.exp(- (gamma * bins) ** (-1 / gamma)) * (1 / gamma) * (gamma * bins) ** (-1 / gamma - 1) * gamma,
    #          linewidth=2, color='r')
    # st.pyplot(fig)
